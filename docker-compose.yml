version: '3.9'
name: challenge-crf

services:
    rabbitmq:
        image: rabbitmq:3-management
        container_name: 'rabbitmq-server'
        ports:
            - 15672:15672
            - 5672:5672
        volumes:
            - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
            - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
        networks: 
            - rabbitmq_go_net
    
    mssqldata:
        image: mcr.microsoft.com/mssql/server:2019-latest
        entrypoint: /bin/bash            
        
    ChallengeCrf.Infra.Data:
        image: mcr.microsoft.com/mssql/server:2019-latest
        container_name: challengecrf.infra.data
        ports:
            - 1433:1433
        volumes:
            - /var/opt/mssql
            # we copy our scripts onto the container
            - ./:/usr/src/app
        working_dir: /usr/src/app 
        
        environment:
            SA_PASSWORD: "Mssql2@19"
            ACCEPT_EULA: "Y"
            MSSQL_PID: "Express"
        
        command:  >
            bash -c '
            /opt/mssql-tools/bin/sqlcmd -S ChallengeCrf.Infra.Data -U sa -P Mssql2@19 -i createdbchallengecrf.sql;
            echo "All done!";
            '
        volumes_from:
            - mssqldata

    ChallengeCrf.Queue.Worker:
        image: challengecrf.queue.worker
        build:
            context: .
            dockerfile: Src/ChallengeCrf.Worker/Dockerfile
        environment:
            - ASPNETCORE_ENVIRONMENT=Stage
        ports:
            - 5100:5100
            
    ChallengeCrf.Api:
        image: challengecrf.api
        build:
            context: .
            dockerfile: Src/ChallengeCrf.Api/Dockerfile
        environment:
            - ASPNETCORE_ENVIRONMENT=Stage
        ports:
            - 5200:5200
            
networks:
    rabbitmq_go_net:
        driver: bridge